{"version":3,"file":"static/js/33.a0943276.chunk.js","mappings":"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","sources":["components/UI/Button.tsx","components/features/Todo/NewTodo.tsx","components/features/Todo/TodoList.tsx","components/features/Auth/Auth.tsx","components/features/Auth/UserProfile.tsx","hooks/useFetch.tsx","pages/TodoPage.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\ninterface IButton {\n  backgroundColor?: string;\n  color?: string;\n  fontSize?: string;\n  borderColor?: string;\n  bold?: string;\n  paddingSize?: string;\n  disabled?: boolean;\n  isClick?: boolean;\n}\n\nconst Button = styled.button<IButton>`\n  background-color: ${({theme, backgroundColor}) =>\n          (backgroundColor && theme.mode[backgroundColor]) || theme.mode.defaultButtonBackground};\n  color: ${({theme, color}) => (color && theme.mode[color]) || theme.mode.defaultButtonColor};\n  font-size: ${({theme, fontSize}) => (fontSize && theme.fontSizes[fontSize]) || theme.fontSizes.md};\n  font-weight: ${({bold}) => (bold ? \"bold\" : \"normal\")};\n  pointer-events: ${({disabled}) => (disabled ? \"none\" : \"auto\")};\n  cursor: ${({disabled}) => (disabled ? \"not-allowed\" : \"pointer\")};\n  opacity: ${({disabled}) => (disabled ? 0.3 : 1)};\n  border-radius: 10px;\n  border: 1px solid ${({\n                         theme,\n                         borderColor\n                       }) => (borderColor && theme.mode[borderColor]) || theme.mode.defaultButtonColor};\n  text-align: center;\n  padding: ${({paddingSize}) => (paddingSize ? paddingSize : \"10px 25px\")};\n  height: 100%;\n\n  &:hover,\n  &:active {\n    background: ${({theme}) => theme.mode.hover};\n    border-color: ${({theme}) => theme.mode.hover};\n  }\n\n`;\n\nexport default Button;\n","import React, {useRef} from 'react';\nimport styled from \"styled-components\";\nimport {Text} from \"../../UI/Text\";\nimport Button from \"../../UI/Button\";\n\n\ninterface NewTodoProps {\n  onAddTodo: (todoText: string) => void;\n}\n\nconst NewTodo = (props: NewTodoProps) => {\n  const textInputRef = useRef<HTMLInputElement>(null);\n\n  const todoSubmitHandler = (event: React.FormEvent) => {\n    event.preventDefault();\n    const enteredText = textInputRef.current!.value;\n    props.onAddTodo(enteredText);\n  };\n\n  return (\n    <StyledNewTodo>\n      <form onSubmit={todoSubmitHandler}>\n        <div className=\"form-control\">\n          <label htmlFor=\"todo-text\"><Text>Todo Text</Text></label>\n          <input type=\"text\" id=\"todo-text\" ref={textInputRef}/>\n        </div>\n        <Button type=\"submit\">ADD TODO</Button>\n      </form>\n    </StyledNewTodo>\n  );\n};\n\nexport default NewTodo;\n\n\nconst StyledNewTodo = styled.div`\n  box-sizing: border-box;\n  margin: 2rem;\n  display: flex;\n  justify-content: center;\n\n  & form {\n    width: 90%;\n    max-width: 40rem;\n  }\n\n  & .form-control {\n    margin-bottom: 1rem;\n  }\n\n  & label, input {\n    display: block;\n    width: 100%;\n  }\n\n  & label {\n    font-weight: bold;\n  }\n\n  & input {\n    font: inherit;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    padding: 0.25rem;\n  }\n\n  & input:focus {\n    outline: none;\n    border-color: #50005a;\n  }\n\n  & Button {\n    padding: 0.5rem 1.5rem;\n    cursor: pointer;\n    height: 2.5rem;\n  }\n`\n","import React, {useRef} from 'react';\nimport styled from \"styled-components\";\nimport Button from \"../../UI/Button\";\nimport {Text} from \"../../UI/Text\";\nimport {Todo} from \"../../../model/todo.model\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ReducerType} from \"../../../store\";\nimport {todoActions} from \"../../../store/todo\";\n\ninterface TodoListProps {\n  items: Todo[];\n  onDeleteTodo: (id: string) => void;\n  onUpdateTodo: (id: string, text: string) => void;\n}\n\nconst TodoList = (props: TodoListProps) => {\n  const textInputRef = useRef<HTMLInputElement>(null);\n  const dispatch = useDispatch();\n  const show = useSelector((state: ReducerType) => state.todo.showUpdate);\n  const clickedId = useSelector((state: ReducerType) => state.todo.id);\n\n  const showUpdateHandler = (id: string) => {\n    dispatch(todoActions.toggleUpdate(id));\n  };\n\n  return (\n    <StyledUl>\n      {props.items && (props.items.map(todo =>\n        <li key={todo.id}>\n          <div>\n            <Text className=\"todo\">{todo.text}</Text>\n            <Button fontSize=\"sm\" onClick={() => showUpdateHandler(todo.id)}>UPDATE</Button>\n            <Button fontSize=\"sm\" onClick={() => props.onDeleteTodo(todo.id)}>DELETE</Button>\n          </div>\n          {show && clickedId === todo.id && (<div>\n            <input type=\"text\" id=\"todo-text\" ref={textInputRef}/>\n          </div>)}\n          {show && clickedId === todo.id && (<div className=\"confirm\">\n            <Button fontSize=\"sm\"\n                    onClick={() => props.onUpdateTodo(todo.id, textInputRef.current!.value)}>CONFIRM</Button>\n          </div>)}\n        </li>\n      ))}\n    </StyledUl>\n  );\n};\n\nexport default TodoList;\n\n\nconst StyledUl = styled.ul`\n  list-style: none;\n  width: 90%;\n  max-width: 40rem;\n  margin: 2rem auto;\n  padding: 0;\n  text-align: center;\n\n  & li {\n    margin: 1rem 0;\n    padding: 1rem;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n    border-radius: 6px;\n    background-color: ${({theme}) => theme.mode.background};\n    border: 1px solid ${({theme}) => theme.mode.border};\n\n    .confirm {\n      display: flex;\n      flex-direction: row-reverse;\n    }\n  }\n\n  & li div {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    .todo {\n      margin-right: auto;\n    }\n\n    Button {\n      margin-right: 1rem;\n    }\n\n    & input {\n      font: inherit;\n      border: 1px solid #ccc;\n      border-radius: 5px;\n      padding: 0.25rem;\n      width: 35rem;\n      margin: 1rem;\n    }\n  }\n`\n","import React from \"react\";\nimport {useDispatch} from 'react-redux';\nimport {authActions} from \"../../../store/auth\";\n\nimport styled from 'styled-components';\nimport Button from \"../../UI/Button\";\nimport {Text} from \"../../UI/Text\";\n\n\nconst Auth = () => {\n  const dispatch = useDispatch();\n\n  const loginHandler = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    dispatch(authActions.login());\n  }\n\n  return (\n    <StyledAuth>\n      <section>\n        <form onSubmit={e => loginHandler(e)}>\n          <div className=\"control\">\n            <label htmlFor=\"email\"><Text>Email</Text></label>\n            <input type=\"email\" id=\"email\"/>\n          </div>\n          <div className=\"control\">\n            <label htmlFor=\"password\"><Text>Password</Text></label>\n            <input type=\"password\" id='password'/>\n          </div>\n          <Button>Login</Button>\n        </form>\n      </section>\n    </StyledAuth>\n  );\n}\n\nexport default Auth;\n\nconst StyledAuth = styled.main`\n  margin: 2rem auto;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.2);\n  border-radius: 8px;\n  border: 1px solid ${({theme}) => theme.mode.border};\n  padding: 1rem;\n  text-align: center;\n  background-color: ${({theme}) => theme.mode.background};\n  width: 90%;\n  max-width: 40rem;\n\n  & .control {\n    margin-bottom: 0.5rem;\n  }\n\n  & .control label {\n    display: block;\n    color: #616161;\n    text-transfrom: uppercase;\n    margin-bottom: 0.5rem;\n  }\n\n  & .control input {\n    display: block;\n    width: 80%;\n    margin: auto;\n    border-radius: 4px;\n    padding: 0.25rem;\n    border: 1px solid #ccc;\n  }\n\n  button {\n    margin-top: 1rem;\n    height: 2.5rem;\n  }\n`\n","import styled from 'styled-components';\nimport {Text} from \"../../UI/Text\";\nimport {fontSizes} from \"../../UI/theme\";\n\nconst UserProfile = () => {\n  return (\n    <StyledUserProfile>\n      <Text fontSize=\"xl\" fontWeight=\"semiBold\">\n        Welcome :-)\n      </Text>\n    </StyledUserProfile>\n  );\n};\n\nexport default UserProfile;\n\nconst StyledUserProfile = styled.main`\n  margin: 2rem auto;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.2);\n  width: 90%;\n  max-width: 40rem;\n\n  border-radius: 8px;\n  padding: 1rem;\n  text-align: center;\n  background-color: ${({theme}) => theme.mode.background};\n  border: 1px solid ${({theme}) => theme.mode.border};\n\n  h2 {\n    font-size: 30px;\n    font-weight: bold;\n  }\n`\n","import {useState, useEffect} from 'react';\nimport {Todo} from \"../model/todo.model\";\n\nconst useFetch = (url: string) => {\n  const [data, setData] = useState<Todo[]>([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const abortCont = new AbortController();\n\n    fetch(url, {signal: abortCont.signal})\n      .then(res => {\n        if (!res.ok) { // error coming back from server\n          throw Error('could not fetch the data for that resource');\n        }\n        return res.json();\n      })\n      .then(data => {\n        setData(data.hello);\n        console.log(data.hello);\n        setError(null);\n      })\n      .catch(err => {\n        if (err.name === 'AbortError') {\n        } else {\n          // auto catches network / connection error\n          setError(err.message);\n        }\n      });\n\n    // abort the fetch\n    return () => abortCont.abort();\n  }, [url])\n\n  return {data, error};\n}\n\n\nexport default useFetch;\n","import NewTodo from \"../components/features/Todo/NewTodo\";\nimport TodoList from \"../components/features/Todo/TodoList\";\nimport Auth from \"../components/features/Auth/Auth\";\nimport UserProfile from \"../components/features/Auth/UserProfile\";\nimport React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ReducerType} from \"../store\";\nimport useFetch from \"../hooks/useFetch\";\nimport {useNavigate} from \"react-router-dom\";\nimport {todoActions} from \"../store/todo\";\n\nconst TodoPage = () => {\n  const {error, data: todos} = useFetch('/hello');\n  // const [todos, setTodos] = useState<Todo[]>([]);\n  const isAuth = useSelector((state: ReducerType) => state.auth.isAuthenticated);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const todoAddHandler = (text: string) => {\n    // setTodos(prevTodos => [...prevTodos,\n    //   {id: Math.random().toString(), text: text}]);\n    const todo = {text};\n\n    fetch('http://localhost:3001/todo/', {\n      method : 'POST',\n      headers: {\"Content-Type\": \"application/json\"},\n      body   : JSON.stringify(todo)\n    }).then(() => {\n      navigate('/crud-react-ts/nope');\n    })\n  }\n\n  const todoDeleteHandler = (todoId: string) => {\n    // setTodos(prevTodos => {\n    //   return prevTodos.filter(todo => todo.id !== todoId);\n    //});\n    fetch('http://localhost:3001/todo/' + todoId, {\n      method: 'DELETE'\n    }).then(() => {\n      navigate('/crud-react-ts/nope');\n    })\n  };\n\n  const todoUpdateHandler = (todoId: string, text: string) => {\n    // setTodos(prevTodos => {\n    //   return prevTodos.filter(todo => todo.id !== todoId);\n    //});\n    const putData = {\n      \"text\": text,\n      \"id\"  : todoId,\n    };\n\n    fetch('http://localhost:3001/todo/' + todoId, {\n      method : 'PUT',\n      headers: {\"Content-Type\": \"application/json\"},\n      body   : JSON.stringify(putData)\n    }).then(() => {\n      navigate(`/crud-react-ts/nope`);\n      dispatch(todoActions.toggleUpdate(todoId));\n    })\n  };\n  return (\n    <>\n      {error && <div>{error}</div>}\n      {!isAuth && <Auth/>}\n      {isAuth && <UserProfile/>}\n      {isAuth && <NewTodo onAddTodo={todoAddHandler}/>}\n      {isAuth && <TodoList items={todos} onDeleteTodo={todoDeleteHandler} onUpdateTodo={todoUpdateHandler}\n      />}\n    </>\n  )\n}\n\nexport default TodoPage;\n"],"names":["Button","styled","theme","backgroundColor","mode","defaultButtonBackground","color","defaultButtonColor","fontSize","fontSizes","md","bold","disabled","borderColor","paddingSize","hover","props","textInputRef","useRef","StyledNewTodo","onSubmit","event","preventDefault","enteredText","current","value","onAddTodo","className","htmlFor","Text","type","id","ref","dispatch","useDispatch","show","useSelector","state","todo","showUpdate","clickedId","showUpdateHandler","todoActions","StyledUl","items","map","text","onClick","onDeleteTodo","onUpdateTodo","background","border","StyledAuth","e","authActions","loginHandler","StyledUserProfile","fontWeight","url","useState","data","setData","error","setError","useEffect","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","hello","console","log","catch","err","name","message","abort","useFetch","todos","isAuth","auth","isAuthenticated","navigate","useNavigate","method","headers","body","JSON","stringify","todoId","putData"],"sourceRoot":""}